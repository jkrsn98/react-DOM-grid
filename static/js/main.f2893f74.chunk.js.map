{"version":3,"sources":["components/Cell.js","components/Row.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","onClick","setColour","Row","cells","i","numberOfCollumns","push","colourPicked","Table","addRow","state","numberOfRows","setState","removeRow","addColumn","removeColumn","pickColour","e","target","value","style","backgroundColor","numRows","this","className","id","onChange","PureComponent","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAEe,SAASA,EAAKC,GACzB,OACI,wBAAIC,QAASD,EAAME,YCDZ,SAASC,EAAIH,GAGxB,IAFA,IAAII,EAAQ,GAEJC,EAAI,EAAGA,GAAGL,EAAMM,iBAAkBD,IACtCD,EAAMG,KACF,kBAACR,EAAD,CACAS,aAAgBR,EAAMQ,aACtBN,UAAaF,EAAME,aAK3B,OACI,4BACKE,G,ICdQK,E,kDAEjB,aAAc,IAAD,8BACT,gBAQJC,OAAS,WACF,EAAKC,MAAMC,aAAa,GAC3B,EAAKC,SAAS,CACVD,aAAc,EAAKD,MAAMC,aAAe,KAZnC,EAgBbE,UAAY,WACR,EAAKD,SAAS,CACVD,aAAc,EAAKD,MAAMC,aAAe,KAlBnC,EAsBbG,UAAY,WACR,EAAKF,SAAS,CACVP,iBAAkB,EAAKK,MAAML,iBAAmB,KAxB3C,EA4BbU,aAAe,WACX,EAAKH,SAAS,CACVP,iBAAkB,EAAKK,MAAML,iBAAmB,KA9B3C,EAkCbW,WAAa,SAACC,GACV,EAAKL,SAAS,CACVL,aAAaU,EAAEC,OAAOC,SApCjB,EAwCblB,UAAY,SAACgB,GACTA,EAAEC,OAAOE,MAAMC,gBAAkB,EAAKX,MAAMH,cAvC5C,EAAKG,MAAM,CACPC,aAAa,EACbN,iBAAiB,EACjBE,aAAa,SALR,E,qDA+CT,IAFA,IAAIe,EAAU,GAENlB,EAAI,EAAGA,GAAGmB,KAAKb,MAAMC,aAAcP,IACvCkB,EAAQhB,KACJ,kBAACJ,EAAD,CACAG,iBAAkBkB,KAAKb,MAAML,iBAC7BE,aAAgBgB,KAAKb,MAAMH,aAC3BN,UAAasB,KAAKtB,aAI1B,OACI,oCACI,yBAAKuB,UAAU,WACX,4BAAQC,GAAG,SAASzB,QAASuB,KAAKd,QAAlC,aAGA,4BAAQgB,GAAG,SAAUzB,QAASuB,KAAKT,WAAnC,iBAGA,4BAAQW,GAAG,SAASzB,QAASuB,KAAKV,WAAlC,gBAGA,4BAAQY,GAAG,SAASzB,QAASuB,KAAKR,cAAlC,qBAKJ,6BACI,4BACA,4BAAQS,UAAU,kBAAmBE,SAAUH,KAAKP,YAChD,4BAAQG,MAAM,SAAd,SACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,SAAd,WAGR,4BACA,yBAAKK,UAAU,SACf,+BACKF,S,GAxFcK,iBCCdC,E,uKAEjB,OACE,oCACE,wBAAIJ,UAAU,WAAd,kBACD,oCAAS,kBAAC,EAAD,MAAT,U,GAL0BK,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f2893f74.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Cell(props) {\r\n    return (\r\n        <td onClick={props.setColour}>\r\n        </td>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport Cell from './Cell'\r\n\r\nexport default function Row(props) {\r\n    let cells = []\r\n\r\n    for(let i = 0; i<=props.numberOfCollumns; i++){\r\n        cells.push(\r\n            <Cell \r\n            colourPicked = {props.colourPicked}\r\n            setColour = {props.setColour}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            {cells}\r\n        </tr>\r\n\r\n    )\r\n}\r\n\r\n","import React, { PureComponent } from 'react'\r\nimport Row from './Row'\r\n\r\nexport default class Table extends PureComponent {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            numberOfRows:0,\r\n            numberOfCollumns:0,\r\n            colourPicked:'white'\r\n        }\r\n    }\r\n\r\n    addRow = () => {\r\n        if(this.state.numberOfRows<8){\r\n        this.setState({\r\n            numberOfRows: this.state.numberOfRows + 1\r\n        })}\r\n    }\r\n\r\n    removeRow = () => {\r\n        this.setState({\r\n            numberOfRows: this.state.numberOfRows - 1\r\n        })\r\n    }\r\n\r\n    addColumn = () => {\r\n        this.setState({\r\n            numberOfCollumns: this.state.numberOfCollumns + 1\r\n        })\r\n    }\r\n\r\n    removeColumn = () => {\r\n        this.setState({\r\n            numberOfCollumns: this.state.numberOfCollumns - 1\r\n        })\r\n    }\r\n\r\n    pickColour = (e) => {\r\n        this.setState({\r\n            colourPicked:e.target.value\r\n        })\r\n    }\r\n\r\n    setColour = (e) => {\r\n        e.target.style.backgroundColor = this.state.colourPicked;\r\n    }\r\n\r\n    render() {\r\n        let numRows = []\r\n\r\n        for(let i = 0; i<=this.state.numberOfRows; i++){\r\n            numRows.push(\r\n                <Row \r\n                numberOfCollumns={this.state.numberOfCollumns}\r\n                colourPicked = {this.state.colourPicked}\r\n                setColour = {this.setColour}\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"buttons\">\r\n                    <button id=\"button\" onClick={this.addRow}>\r\n                        add a row\r\n                    </button>\r\n                    <button id=\"button\"  onClick={this.addColumn}>\r\n                        add a collumn\r\n                    </button>\r\n                    <button id=\"button\" onClick={this.removeRow}>\r\n                        remove a row\r\n                    </button>\r\n                    <button id=\"button\" onClick={this.removeColumn}>\r\n                        remove a collumn\r\n                    </button>\r\n                </div>\r\n\r\n                <div>\r\n                    <p></p>\r\n                    <select className=\"colour-selector\"  onChange={this.pickColour}>\r\n                        <option value=\"white\">white</option>\r\n                        <option value=\"red\">red</option>\r\n                        <option value=\"blue\">blue</option>\r\n                        <option value=\"green\">green</option>\r\n                        <option value=\"black\">black</option>\r\n                    </select>\r\n                </div>\r\n                <p></p>\r\n                <div className=\"table\">\r\n                <table>\r\n                    {numRows}\r\n                </table>      \r\n                </div>      \r\n            </>\r\n          );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Table from './components/Table'\r\n\r\nexport default class App extends Component{\r\n  render(){\r\n    return(\r\n      <>\r\n        <h1 className=\"heading\">create a grid!</h1>\r\n       <center> <Table /> </center>\r\n      </>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}